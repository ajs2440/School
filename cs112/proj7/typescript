Script started on Sat 03 Nov 2018 03:40:21 PM EDT
ajs244@gold23:~/cs112/proj7$ ls
Debug		 ReversePoem.h		StackException.h  StackTester.h
poems		 ReversePoemTester.cpp	Stack.h		  tester.cpp
ReversePoem.cpp  ReversePoemTester.h	StackTester.cpp   typescript
ajs244@gold23:~/cs112/proj7$ cat St  tester.cpp Stack.h StackTester.h StackTester.cp p StackException.h ReversePe oem.gh    h ReversePoem.cpp ReversePoemTester.h ReversePoem Tester.cpp  
/* tester.cpp is a "driver" to run the tests in the StackTester class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Advait Scaria
 * Date: 10/30/2018
 */
 
#include "StackTester.h"
#include "ReversePoem.h"
#include "ReversePoemTester.h"
#include <iostream>
using namespace std;

int main() {
	StackTester st;
	st.runTests();

	cout << endl;

	ReversePoemTester rpt;
	rpt.runTests();

	// ReversePoem program
	cout << "\nEnter the name of the poem file: ";
	string poemFile;
	cin >> poemFile;

	ReversePoem reversePoem(poemFile);
	cout << reversePoem.getTitle() << "\n"
			<< reversePoem.getAuthor() << "\n"
			<< "\n*** Top-To-Bottom ***\n\n"
			<< reversePoem.getBody()
			<< "\n\n*** Bottom-To-Top ***\n\n"
			<< reversePoem.getBodyReversed()
			<< endl;
}

/* Stack.h provides a (dynamic-array-based) Stack class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Advait Scaria
 * Date: 10/30/2018
 * 
 * Invariant: mySize == 0 && isEmpty() && !isFull()
 *         || mySize == myCapacity && !isEmpty() && isFull()
 *         || mySize > 0 && mySize < myCapacity && !isEmpty() && !isFull().
 * Notes: 
 * 1. Member mySize always contains the index of the next empty space in myArray
 *        (the index of the array element into which the next pushed item will be placed).
 * 2. Sending push() to a full Stack throws the exception Stack::Overflow.
 * 3. Sending pop() or peekTop() to an empty Stack throws the exception Stack::Underflow.
 */

#ifndef STACK_H_
#define STACK_H_

#include "StackException.h"
#include <string>
#include <iostream>
using namespace std;

template<class Item>

class Stack {
public:
	Stack(unsigned capacity);
	Stack(const Stack& original);
	~Stack();
	Stack& operator=(const Stack& original);
	bool isEmpty() const;
	bool isFull() const;
	Item peekTop() const;
	void push(const Item&);
	Item pop();
	
	unsigned getSize() 			{return mySize;}
	unsigned getCapacity() 		{return myCapacity;}
	void setCapacity(const unsigned& newCapacity);

protected:
	void makeCopyOf(const Stack& original);
	
private:
	unsigned myCapacity;
	unsigned mySize;
	Item*    myArray;
	friend class StackTester;
};

/* explicit-value constructor
 * Parameter: capacity, an unsigned value.
 * Precondition: capacity > 0.
 * Postcondition: mySize == 0 && myCapacity == capacity
 *              && myArray contains the address of a dynamic array of 'capacity' entries.
 */
template<class Item>
Stack<Item>::Stack(unsigned capacity) {
	if (capacity == 0) {
		throw StackException ("Stack(size)", "size must be positive!");
	} else {
		mySize = 0;
		myCapacity = capacity;
		myArray = new Item[capacity];
	}
}

/* copy constructor
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original.
 */
template<class Item>
Stack<Item>::Stack(const Stack& original) {
	makeCopyOf(original);
}

/* utility method containing code refactored from
 *  the copy constructor and operator=.
 * Parameter: original, a Stack (const reference).
 * Precondition: original.myCapacity > 0.
 * Postcondition: I am a copy of original.
 */
template<class Item>
void Stack<Item>::makeCopyOf(const Stack& original) {
	myCapacity = original.myCapacity;
	myArray = new Item[myCapacity];

	for (unsigned i = 0; i < myCapacity; i++) {
		myArray[i] = original.myArray[i];
	}
	mySize = original.mySize;
}

/* destructor
 * Postcondition: myCapacity == 0 && mySize == 0
 *             && myArray has been deallocated.
 */
template<class Item>
Stack<Item>::~Stack<Item>() {
	delete [] myArray;
	myArray = NULL;
	myCapacity = 0;
	mySize = 0;
}

/* assignment operator
 * Parameter: original, a Stack (const reference).
 * Postcondition: I am a copy of original
 *              && I have been returned.
 */
template<class Item>
Stack<Item>& Stack<Item>::operator=(const Stack<Item>& original) {
	if (this != &original) {
		delete [] myArray;
		makeCopyOf(original);
	}
	return *this;
}

/* isEmpty()...written by Advait Scaria
 * Return: bool, returns true when Stack contains no items and false otherwise
 */
template<class Item>
bool Stack<Item>::isEmpty() const {
	return mySize == 0;
}

/* isFull()...written by Advait Scaria
 * Return: bool, returns true when Stack's size equals its capacity
 */
template<class Item>
bool Stack<Item>::isFull() const {
	return mySize == myCapacity;
}

/* peekTop()...written by Advait Scaria
 * Precondition: Stack must not be empty
 * Return: Item, returns the Item at the top of the Stack
 */
template<class Item>
Item Stack<Item>::peekTop() const {
	if (isEmpty()) {
		throw StackException ("peekTop()", "stack is empty");
	} else {
		return myArray[mySize - 1];
	}
}

/* push()...written by Advait Scaria
 * @param: it, const Item
 * Precondition: valid Item it and myCapcity != mySize
 * Return: void, adds Item it at the end of the Stack
 */
template<class Item>
void Stack<Item>::push(const Item& it) {
	if (myCapacity == mySize) {
		throw StackException ("push()" , "stack is full");
	} else {
		myArray[mySize] = it;
		mySize++;
	}

}

/* pop()...written by Advait Scaria
 * Precondition: Stack must not be empty
 * Return: Item, pops, or removes, the Item at the end of the Stack and returns it
 */
template<class Item>
Item Stack<Item>::pop() {
	if (isEmpty()) {
		throw StackException ("pop()", "stack is empty");
	} else {
		mySize--;
		return myArray[mySize];
	}
}

/* setCapacity()...written by Advait Scaria
 * Precondition: Capacity is valid
 * Return: void
 * Postcondition: Sets myCapacity to newCapacity
 */
template<class Item>
void Stack<Item>::setCapacity(const unsigned& newCapacity) {
	if (newCapacity != myCapacity) {
		if (newCapacity < getSize()) {
			throw StackException ("setCapacity()", "newCapacity < original stack size");
		} else {
			Item* newArray = new Item[newCapacity];
			for (unsigned i = 0; i < getSize(); ++i) {
				newArray[i] = myArray[i];
			}
			delete [] myArray;
			myArray = newArray;
			myCapacity = newCapacity;
		}
	}
}


#endif

/* StackTester.h declares a test-class for a dynamically allocated (array) Stack.
 * Joel Adams, for CS 112 at Calvin College
 * Student Name: Advait Scaria
 * Date: 10/30/2018
 */

#ifndef STACKTESTER_H_
#define STACKTESTER_H_


class StackTester {
public:
	void runTests();
	void testConstructor();
	void testIsEmpty();
	void testPushPeekTopAndIsFull();
	void testPop();
	void testCopyConstructor();
	void testAssignment();
	void testDestructor();

	void testGetSizeGetCapacityAndSetCapacity();
};

#endif /*STACKTESTER_H_*/

/* StackTester.cpp defines test-methods for the 
 *  dynamically allocated (array) Stack operations
 *  Joel Adams, for CS 112 at Calvin College
 *  Student Name: Advait Scaria
 *  Date: 10/30/2018
 */

#include "StackTester.h"
#include "ReversePoemTester.h"
#include "Stack.h"
#include <iostream>  // cout, cerr, ...
#include <cassert>   // assert()
#include <cstdlib>   // exit()
using namespace std;

void StackTester::runTests() {
	cout << "Testing Stack class..." << endl;
	testConstructor();
	testIsEmpty();
	testPushPeekTopAndIsFull();
	testPop();
	testCopyConstructor();
	testAssignment();
	testDestructor();
	testGetSizeGetCapacityAndSetCapacity();
	cout << "All tests passed!" << endl;
}

void StackTester::testConstructor() {
	cout << "- Testing constructor... " << flush;
	// invalid parameter
	try {
		Stack<int> s1(0);
		cerr << "\nConstructed stack of size 0\n";
		exit(1);
	} catch (const StackException& se) {
		cout << se << flush;
	}
	cout << " 1 " << flush;
	// valid parameter
	Stack<int> s2(3);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testIsEmpty() {
	cout << "- Testing isEmpty()... " << flush;
	// capacity 1
	Stack<int> s1(1);
	assert( s1.isEmpty() );
	cout << " 1 " << flush;
	// capacity > 1
	Stack<int> s2(3);
	assert( s2.isEmpty() );
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}


void StackTester::testPushPeekTopAndIsFull() {
	cout << "- Testing push()... " << flush;
	// test with capacity 1
	Stack<int> s1(1);
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	try {
		s1.push(22);
		cerr << "\npush() worked on a full stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1 " << flush;
	}
	// test with capacity > 1
	Stack<int> s2(3);
	s2.push(11);
	assert( s2.peekTop() == 11 );
	s2.push(22);
	assert( s2.peekTop() == 22 );
	s2.push(33);
	assert( s2.peekTop() == 33 );
	try {
		s2.push(44);
		cerr << "\npush() worked on a full stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2 " << flush;
	}
	cout << " Passed! " << endl;
}

void StackTester::testPop() {
	cout << "- Testing pop()... " << flush;
	// try empty, capacity 1
	Stack<int> s1(1);
	assert( s1.isEmpty() );
    try {
            s1.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 0a " << flush;
    }
	try {
		s1.pop();
		cerr << "\npop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 0b " << flush;
	}

	// try empty, capacity > 1
	Stack<int> s2(3);
	try {
		s2.pop();
		cerr << "\npop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 1a " << flush;
	}
    try {
            s2.peekTop();
            cerr << "\npeekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 1b " << flush;
    }

	// try non-empty, capacity 1
	Stack<int> s3(1);
	s3.push(11);
	assert( s3.peekTop() == 11 );
	assert( s3.pop() == 11 );
	cout << " 2 " << flush;
	try {
		s3.pop();
		cerr << "\ns3.pop() worked on empty stack (size 1)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 2a " << flush;
	}
    try {
            s3.peekTop();
            cerr << "\ns3.peekTop() worked on empty stack (size 1)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 2b " << flush;
    }

	// try non-empty, capacity > 1
	Stack<int> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	assert( s4.peekTop() == 33 );
	assert( s4.pop() == 33 );
	assert( s4.peekTop() == 22 );
	assert( s4.pop() == 22 );
	assert( s4.peekTop() == 11 );
	assert( s4.pop() == 11 );
	cout << " 3 " << flush;
	try {
		s4.pop();
		cerr << "\ns4.pop() worked on empty stack (size 3)\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 3a " << flush;
	}
    try {
            s4.peekTop();
            cerr << "\ns4.peekTop() worked on empty stack (size 3)\n";
            exit(1);
    } catch (const StackException& se) {
            cout << " 3b " << flush;
    }

	cout << " Passed!" << endl;
}

void StackTester::testCopyConstructor() {
	cout << "- Testing copy constructor... " << flush;
	// minimal empty Stack
	Stack<int> s1(1);
	Stack<int> s2(s1);
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myCapacity == 1 );
	assert( s2.myArray != s1.myArray );
	cout << " 1 " << flush;
	// minimal non-empty Stack
	Stack<int> s3(1);
	s3.push(11);
	Stack<int> s4(s3);
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// non-minimal, non-empty stack
	Stack<int> s5(3);
	s5.push(11);
	s5.push(22);
	s5.push(33);
	Stack<int> s6(s5);
	assert( s6.myCapacity == s5.myCapacity );
	assert( s6.mySize == s5.mySize );
	assert( s6.myArray != s5.myArray );
	assert( s6.pop() == 33 );
	assert( s6.pop() == 22 );
	assert( s6.pop() == 11 );
	assert( s5.peekTop() == 33 );
	cout << " 3 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testAssignment() {
	cout << "- Testing assignment... " << flush;
	// minimal empty Stacks, same size
	Stack<int> s1(1);
	Stack<int> s2(1);
	s2 = s1;
	assert( s2.isEmpty() );
	assert( s2.myArray != NULL );
	assert( s2.myArray != s1.myArray );
	assert( s2.myCapacity == 1 );
	cout << " 1 " << flush;
	// minimal non-empty Stack to empty Stack, same capacity
	Stack<int> s3(1);
	s3.push(11);
	Stack<int> s4(1);
	s4 = s3;
	assert( !s4.isEmpty() );
	assert( s4.isFull() );
	assert( s4.peekTop() == 11 );
	assert( s4.myArray != s3.myArray );
	cout << " 2 " << flush;
	// minimal empty stack to non-empty stack, same capacity
	Stack<int> s5(1);
	Stack<int> s6(1);
	s6.push(11);
	s6 = s5;
	assert( s6.isEmpty() );
	assert( s6.myArray != NULL );
	assert( s6.myArray != s5.myArray );
	assert( s6.myCapacity == 1 );
	cout << " 3 " << flush;
	// non-minimal non-empty stack to empty stack, different capacities
	Stack<int> s7(3);
	s7.push(11);
	s7.push(22);
	s7.push(33);
	Stack<int> s8(2);
	s8 = s7;
	assert( s8.myArray != s7.myArray );
	assert( s8.myCapacity == s7.myCapacity );
	assert( s8.mySize == s7.mySize );
	assert( s8.pop() == 33 );
	assert( s8.pop() == 22 );
	assert( s8.pop() == 11 );
	assert( s7.peekTop() == 33 );
	cout << " 4 " << flush;
	// non-minimal, empty stack to non-empty stack, different capacities
	Stack<int> s9(2);
	Stack<int> s10(3);
	s10.push(11);
	s10.push(22);
	s10.push(33);
	s10 = s9;
	assert( s10.isEmpty() );
	assert( s10.myArray != s9.myArray );
	assert( s10.myCapacity == s10.myCapacity );
	cout << " 5 " << flush;
	// self-assignment, minimal size
	Stack<int> s11(1);
	s11.push(11);
	s11 = s11;
	assert( s11.isFull() );
	assert( !s11.isEmpty() );
	cout << " 6 " << flush;
	// chaining
	Stack<int> s12(2);
	s12.push(11);
	s12.push(22);
	Stack<int> s13(1);
	Stack<int> s14(1);
	s14 = s13 = s12;
	assert( s14.isFull() );
	assert( s14.myArray != s13.myArray );
	assert( s14.myArray != s12.myArray );
	assert( s14.pop() == 22 );
	assert( s14.pop() == 11 );
	assert( s14.isEmpty() );
	cout << " 7 " << flush;
    // self-assignment, non-minimal size
    s13 = s13;
	assert( !s13.isEmpty() );
	assert( s13.isFull() );
	assert( s13.pop() == 22 );
	assert( s13.pop() == 11 );
	assert( s13.isEmpty() );
	cout << " 8 " << flush;
	cout << "Passed!" << endl;
}

void StackTester::testDestructor() {
	cout << "- Testing destructor..." << flush;
	// minimal, empty
	Stack<int> s1(1);
	s1.~Stack();
	assert( s1.isEmpty() );
	assert( s1.myArray == NULL );
	assert( s1.myCapacity == 0 );
	cout << " 1 " << flush;
	// minimal, non-empty
	Stack<int> s2(1);
	s2.push(11);
	s2.~Stack();
	assert( s2.isEmpty() );
	assert( s2.myArray == NULL );
	assert( s2.myCapacity == 0 );
	cout << " 2 " << flush;
	// non-minimal, empty
	Stack<int> s3(3);
	s3.~Stack();
	assert( s3.isEmpty() );
	assert( s3.myArray == NULL );
	assert( s3.myCapacity == 0 );
	cout << " 3 " << flush;
	// non-minimal, non-empty
	Stack<int> s4(3);
	s4.push(11);
	s4.push(22);
	s4.push(33);
	s4.~Stack();
	assert( s4.isEmpty() );
	assert( s4.myArray == NULL );
	assert( s4.myCapacity == 0 );
	cout << " 4 " << flush;
	cout << " Passed!" << endl;
}

void StackTester::testGetSizeGetCapacityAndSetCapacity() {
	cout << "- Testing getSize(), getCapacity(), setCapacity()... " << flush;
	// test with capacity 1 & no items
	Stack<int> s1(1);
	assert( s1.isEmpty() );
	assert( !s1.isFull() );
	assert( s1.getSize() == 0 );
	assert( s1.getCapacity() == 1 );
	cout << " 1 " << flush;

	// test with capacity 1 & 1 item
	s1.push(11);
	assert( s1.peekTop() == 11 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	assert( s1.getSize() == 1 );
	assert( s1.getCapacity() == 1 );
	cout << " 2 " << flush;

	// test with capacity > 1 & no items
	s1.setCapacity(3);
	assert( s1.pop() == 11 );
	assert( s1.isEmpty() );
	assert( !s1.isFull() );
	assert( s1.getSize() == 0 );
	assert( s1.getCapacity() == 3 );
	cout << " 3 " << flush;

	// test with capacity > 1 & many items
	s1.push(11);
	s1.push(22);
	s1.push(33);
	assert( s1.peekTop() == 33 );
	assert( !s1.isEmpty() );
	assert( s1.isFull() );
	assert( s1.getSize() == 3 );
	assert( s1.getCapacity() == 3 );
	for (int i = 0; i < s1.getSize(); ++i) {
		assert( s1.myArray[i] == (i+1)*11 );
	}
	cout << " 4 " << flush;

	// test with stack of initial capacity > 1 and many items
	Stack<int> s2(3);
	s2.push(11);
	s2.push(22);
	s2.push(33);
	assert( s2.peekTop() == 33 );
	assert( !s2.isEmpty() );
	assert( s2.isFull() );
	assert( s2.getSize() == 3 );
	assert( s2.getCapacity() == 3 );
	for (int i = 0; i < s2.getSize(); ++i) {
		assert( s2.myArray[i] == (i+1)*11 );
	}

	// test with new capacity less than original stack size
	try {
		s2.setCapacity(1);
		cerr << "\ns4.setCapacity() worked when new size is less than original size\n";
		exit(1);
	} catch (const StackException& se) {
		cout << " 5 " << flush;
	}

	s2.setCapacity(6);
	assert( s2.peekTop() == 33 );
	assert( !s2.isEmpty() );
	assert( !s2.isFull() );
	assert( s2.getSize() == 3 );
	assert( s2.getCapacity() == 6 );
	for (int i = 0; i < s2.getSize(); ++i) {
		assert( s2.myArray[i] == (i+1)*11 );
	}
	cout << " 5a " << flush;

	s2.push(44);
	s2.push(55);
	s2.push(66);
	assert( s2.peekTop() == 66 );
	assert( !s2.isEmpty() );
	assert( s2.isFull() );
	assert( s2.getSize() == 6 );
	assert( s2.getCapacity() == 6 );
	for (int i = 0; i < s2.getSize(); ++i) {
		assert( s2.myArray[i] == (i+1)*11 );
	}
	cout << " 5b " << flush;

	cout << " Passed! " << endl;
}
/* StackException.h models exceptions in stack operations.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Advait Scaria
 * Date: 10/30/2018
 */

#ifndef STACK_EXCEPTION
#define STACK_EXCEPTION

#include <iostream>
using namespace std;

 
class StackException {
public:
   StackException(const string& whereThrown,
                  const string& message) { 
       myLocation = whereThrown; 
       myMessage = message; 
   }

   string asString() const {
       return "*** StackException in " +
               myLocation + ": " + myMessage; 
   }

private:
   string myLocation;
   string myMessage;
};  // StackException


/* Function to allow a StackException (or a subclass) to be displayed
 * via an ostream.
 * Parameters: out, an ostream;
 *             se, a StackException.
 * Postcondition: the string representation of se has been inserted
 * into out
 *             && return-value == out.
 */
inline ostream& operator<<(ostream& out, const StackException& se) {
      out << se.asString();
      return out;
}

#endif

/* ReversePoem.h provides a ReversePoem class.
 * Joel Adams, for CS 112 at Calvin College.
 * Student Name: Advait Scaria
 * Date: 10/30/2018
 */

#ifndef REVERSEPOEM_H_
#define REVERSEPOEM_H_

#include "Stack.h"
#include "StackException.h"
#include <iostream>
#include <fstream>
using namespace std;

class ReversePoem {
public:
	ReversePoem(const string& fileName);

	string getTitle() const 			{return myTitle;}
	string getAuthor() const			{return myAuthor;}
	string getBody() const				{return myBody;}
	string getBodyReversed() const		{return myBodyReversed;}

private:
	string myTitle;
	string myAuthor;
	string myBody;
	string myBodyReversed;
};

#endif /* REVERSEPOEM_H_ */
/* ReversePoem.cpp defines methods for ReversePoem objects
 *  Joel Adams, for CS 112 at Calvin College
 *  Student Name: Advait Scaria
 *  Date: 10/30/2018
 */
#include "ReversePoem.h"
#include <iostream>
#include <fstream>
#include <cassert>
using namespace std;

/* explicit ReversePoem constructor
 * Parameter: fileName, a string with name of poem text file
 * Precondition: file with fileName must exist and be formatted correctly
 * 				 (e.g. 1st line contains poem's title, 2nd line contains poem's author,
 * 				 3rd line is empty and 4th line to the end of file is the poem's body)
 * Postcondition: myTitle, myAuthor, myBody, and myBodyReversed initialized with values from poem file
 */
ReversePoem::ReversePoem(const string& fileName) {
	string emptyline;
	ifstream fin(fileName.c_str());
	assert( fin.is_open() );

	getline(fin, myTitle);			// get poem's title from first file line and store in myTitle
	getline(fin, myAuthor);			// get poem's author from first file line and store in myAuthor
	getline(fin, emptyline);		// read in empty line to emptyline variable

	Stack<string> poem(1);
	string line;
	while(fin) {
		try {
			getline(fin, line);							// try to read in line to stack
			poem.push(line);
		} catch (const StackException& se) {			// if stack full, double capacity and then read in line to stack
			poem.setCapacity(2*poem.getCapacity());
			getline(fin, line);
			poem.push(line);
		}
		string currentline = poem.pop();
		myBody = myBody + currentline + '\n';
		myBodyReversed = currentline + '\n' + myBodyReversed;
	}
	fin.close();
}
/* ReversePoemTester.h declares a test-class for the ReversePoem class
 * Joel Adams, for CS 112 at Calvin College
 * Student Name: Advait Scaria
 * Date: 11/03/2018
 */

#ifndef REVERSEPOEMTESTER_H_
#define REVERSEPOEMTESTER_H_

#include "Stack.h"
#include "ReversePoem.h"

class ReversePoemTester {
public:
	void runTests();
	void testRPConstructor();
};

#endif /* REVERSEPOEMTESTER_H_ */
/* ReversePoemTester.cpp defines test-methods for the ReversePoem class methods
 *  Joel Adams, for CS 112 at Calvin College
 *  Student Name: Advait Scaria
 *  Date: 11/03/2018
 */

#include "ReversePoemTester.h"
#include <iostream>
#include <cassert>
using namespace std;

void ReversePoemTester::runTests() {
	cout << "Testing ReversePoem class..." << endl;
	testRPConstructor();
	cout << "All tests passed!" << endl;
}

void ReversePoemTester::testRPConstructor() {
	cout << "- Testing ReversePoem constructor... " << flush;

	// test first poem
	ReversePoem rp("poems/love.txt");
	assert( rp.getTitle() == "Love?" );
	cout << " 1a " << flush;

	assert( rp.getAuthor() == "Anonymous" );
	cout << " 1b " << flush;

	assert( rp.getBody() == "I don't love you anymore...\n"
							"I would be lying if I said\n"
							"That I still love you the way I always did.\n"
							"I'm sure\n"
							"Nothing was in vain.\n"
							"And I feel inside of me that\n"
							"You mean nothing to me\n"
							"I could never really say that\n"
							"Our time together matters.\n"
							"I feel more and more that\n"
							"I'm forgetting you...\n"
							"And I will never use the phrase\n"
							"I love you.\n"
							"I'm sorry but I must tell the truth.\n\n");
	cout << " 1c " << flush;

	assert( rp.getBodyReversed() == "\nI'm sorry but I must tell the truth.\n"
									"I love you.\n"
									"And I will never use the phrase\n"
									"I'm forgetting you...\n"
									"I feel more and more that\n"
									"Our time together matters.\n"
									"I could never really say that\n"
									"You mean nothing to me\n"
									"And I feel inside of me that\n"
									"Nothing was in vain.\n"
									"I'm sure\n"
									"That I still love you the way I always did.\n"
									"I would be lying if I said\n"
									"I don't love you anymore...\n");
	cout << " 1d " << flush;

	// test second poem
	ReversePoem rp2("poems/cats.txt");
	assert( rp2.getTitle() == "Cats" );
	cout << " 2a " << flush;

	assert( rp2.getAuthor() == "Leo J. Smada" );
	cout << " 2b " << flush;

	assert( rp2.getBody() == "I love it when cats rub against me.\n"
							 "I could never say\n"
							 "I hate those furry felines.\n\n");
	cout << " 2c " << flush;

	assert( rp2.getBodyReversed() == "\nI hate those furry felines.\n"
									 "I could never say\n"
									 "I love it when cats rub against me.\n");
	cout << " 2d " << flush;

	cout << " Passed!" << endl;
}

ajs244@gold23:~/cs112/proj7$ cd poems
ajs244@gold23:~/cs112/proj7/poems$ cat anorexia.txt cats, .txt keepthefaith.txt lo ve.txt
Anorexia
Anonymous

I hate the girl in the mirror
so you'll never hear me say that
I'm good enough
I know in my heart that
the number on the scale defines my worth
and that
being thin will make me happy
I refuse to believe that there is hope
I'm ashamed of my body
No longer can I say
I am worth fighting for.
Cats
Leo J. Smada

I love it when cats rub against me.
I could never say
I hate those furry felines.
Keep The Faith
Tiffany Cheung

The world is hopeless
It is not evident that
We live for a purpose
The truth is
We come and we go
No need to care, no need to know
They tell us
We have a heart and a soul
But that hardly changes anything, don't forget
Our lifetime is short and not within our control
The power's in believing
We should have faith in ourselves
Well, I don't think so
Most of us are meant to be ordinary
Dreams are just hopes, which never come true
It is foolish to presume that
We can all be in God's glow
The future is not in our hands
I would be lying to you if I said
We can change the world together
You need to know that
We can't make it happen
It's not wise to delude ourselves into the thought that
We are more than who we think we are.
Love?
Anonymous

I don't love you anymore...
I would be lying if I said
That I still love you the way I always did.
I'm sure
Nothing was in vain.
And I feel inside of me that
You mean nothing to me
I could never really say that
Our time together matters.
I feel more and more that
I'm forgetting you...
And I will never use the phrase
I love you.
I'm sorry but I must tell the truth.
ajs244@gold23:~/cs112/proj7/poems$ cd ..
ajs244@gold23:~/cs112/proj7$ cd Debug
ajs244@gold23:~/cs112/proj7/Debug$ ls
makefile    ReversePoem.d	 ReversePoemTester.o  StackTester.o  tester.o
objects.mk  ReversePoem.o	 sources.mk	      subdir.mk
proj7	    ReversePoemTester.d  StackTester.d	      tester.d
ajs244@gold23:~/cs112/proj7/Debug$ make all
make: Nothing to be done for 'all'.
ajs244@gold23:~/cs112/proj7/Debug$ cd ..
ajs244@gold23:~/cs112/proj7$ ./Debug/proj7
Testing Stack class...
- Testing constructor... *** StackException in Stack(size): size must be positive! 1  2  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getSize(), getCapacity(), setCapacity()...  1  2  3  4  5  5a  5b  Passed! 
All tests passed!

Testing ReversePoem class...
- Testing ReversePoem constructor...  1a  1b  1c  1d  2a  2b  2c  2d  Passed!
All tests passed!

Enter the name of the poem file: anore     poems/anorexia.txt
Anorexia
Anonymous

*** Top-To-Bottom ***

I hate the girl in the mirror
so you'll never hear me say that
I'm good enough
I know in my heart that
the number on the scale defines my worth
and that
being thin will make me happy
I refuse to believe that there is hope
I'm ashamed of my body
No longer can I say
I am worth fighting for.



*** Bottom-To-Top ***


I am worth fighting for.
No longer can I say
I'm ashamed of my body
I refuse to believe that there is hope
being thin will make me happy
and that
the number on the scale defines my worth
I know in my heart that
I'm good enough
so you'll never hear me say that
I hate the girl in the mirror

ajs244@gold23:~/cs112/proj7$ ./Debug/proj7
Testing Stack class...
- Testing constructor... *** StackException in Stack(size): size must be positive! 1  2  Passed!
- Testing isEmpty()...  1  2  Passed!
- Testing push()...  1  2  Passed! 
- Testing pop()...  0a  0b  1a  1b  2  2a  2b  3  3a  3b  Passed!
- Testing copy constructor...  1  2  3 Passed!
- Testing assignment...  1  2  3  4  5  6  7  8 Passed!
- Testing destructor... 1  2  3  4  Passed!
- Testing getSize(), getCapacity(), setCapacity()...  1  2  3  4  5  5a  5b  Passed! 
All tests passed!

Testing ReversePoem class...
- Testing ReversePoem constructor...  1a  1b  1c  1d  2a  2b  2c  2d  Passed!
All tests passed!

Enter the name of the poem file: kee   poems/keepthefaith.txt
Keep The Faith
Tiffany Cheung

*** Top-To-Bottom ***

The world is hopeless
It is not evident that
We live for a purpose
The truth is
We come and we go
No need to care, no need to know
They tell us
We have a heart and a soul
But that hardly changes anything, don't forget
Our lifetime is short and not within our control
The power's in believing
We should have faith in ourselves
Well, I don't think so
Most of us are meant to be ordinary
Dreams are just hopes, which never come true
It is foolish to presume that
We can all be in God's glow
The future is not in our hands
I would be lying to you if I said
We can change the world together
You need to know that
We can't make it happen
It's not wise to delude ourselves into the thought that
We are more than who we think we are.



*** Bottom-To-Top ***


We are more than who we think we are.
It's not wise to delude ourselves into the thought that
We can't make it happen
You need to know that
We can change the world together
I would be lying to you if I said
The future is not in our hands
We can all be in God's glow
It is foolish to presume that
Dreams are just hopes, which never come true
Most of us are meant to be ordinary
Well, I don't think so
We should have faith in ourselves
The power's in believing
Our lifetime is short and not within our control
But that hardly changes anything, don't forget
We have a heart and a soul
They tell us
No need to care, no need to know
We come and we go
The truth is
We live for a purpose
It is not evident that
The world is hopeless

ajs244@gold23:~/cs112/proj7$ exit

Script done on Sat 03 Nov 2018 03:42:35 PM EDT
