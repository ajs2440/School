Script started on Mon 24 Sep 2018 02:45:55 PM EDT
ajs244@gold24:~/cs112/proj2$ ls
array.cpp  arrayData.txt  array.h  ArrayTester.cpp  ArrayTester.h  Debug  main.cpp  typescript
ajs244@gold24:~/cs112/proj2$ cat array.h
/* array.h declares "C style" array operations.
 * Student: Advait Scaria
 * Date: 09/18/2018
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include <iostream>
#include <cassert>
using namespace std;

void initialize(double *a, unsigned size);

void print(double *a, unsigned size);

double average(double *a, unsigned size);

double sum(double *a, int size);

void read(istream& in, double *a, int size);

void fill(const string& fileName, double *&a, int &numValues);

void resize(double *&a, int oldSize, int newSize);

void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3);

ajs244@gold24:~/cs112/proj2$ cat array.cpp
/* array.cpp defines "C style" array operations
 * Student: Advait Scaria
 * Date: 09/18/2018
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"
#include "array.h"
#include <iostream>
#include <fstream>
#include <sstream>
using namespace std;

/* array method...
      * @param: *a, a double dereference pointer
      * @size: an unsigned int
      * Precondition: size of array must be known
      * Postcondition: initializes the array of doubles to store natural numbers
      */
void initialize(double *a, unsigned size) {
	int val = 0;
	for (unsigned i = 0; i < size; i++) {
		val = i+1;
		a[i] = val;
	}
}

/* array method...
      * @param: *a, a double dereference pointer
      * @size: an unsigned int
      * Precondition: size of array must be known
      * Postcondition: output the values stored in the array of doubles
      */
void print(double *a, unsigned size) {
	for (unsigned i = 0; i < size; i++) {
		cout << *a << '\t';
		a++;
	}
}		

/* array method...
      * @param: *a, a double dereference pointer
      * @size: an unsigned int
      * @return: average, a double variable that gives the average value of the double array
      * Precondition: size of array must be known
      */
double average(double *a, unsigned size) {
	double average = 0;
	double sum = 0;
	for (unsigned i = 0; i < size; i++) {
		sum = sum + *a;
		a++;
	}
	average = sum/size;
	return average;
}

/* array method...
      * @param: *a, a double dereference pointer
      * @param: size, an int
      * @return: sum, a double variable that stores the sum of the values in the double array
      * Precondition: size of array must be known
      */
double sum(double *a, int size) {
	double sum = 0;
	for (int i = 0; i < size; i++) {
		sum = sum + *a;
		a++;
	}
	return sum;
}

/* array method...
      * @param: in, an input stream
      * @param: *a, a double dereference pointer
      * @param: size, an int
      * Precondition: size of array must be known
      * Postcondition: reads numbers from input stream, in, and stores them in a[]
      */
void read(istream& in, double *a, int size) {
	for (int i = 0; i < size; i++) {
		in >> *a;
		a++;
	}
}

/* array method...
      * @param: fileName, a string with the name of a file
      * @param: *&a, a double dereference pointer
      * @param: numValues, an int
      * Precondition: fileName must be known -- a corresponding file with integer values
      * 			  must be made
      * Postcondition: makes an array of size specified in first line of the file passed
      * 			   into the method and reads integer values from the next lines in the
      * 			   file to the array
      */
void fill(const string& fileName, double *&a, int &numValues) {
	// open ifstream to fileName
	ifstream inputFile(fileName.c_str());
	assert (inputFile.is_open());

	// read the first integer from file into numValues
	inputFile >> numValues;

	// dynamically allocate an array of numValues double values
	delete [] a;
	*&a = new double[numValues];

	// read numValues values from the file
	for (int i = 0; i < numValues; i++) {
		inputFile >> *&a[i];
	}

	// close the ifstream
	inputFile.close();
}

/* array method...
      * @param: *&a, a double dereference pointer
      * @param: oldSize, an int
      * @param: newSize, an int
      * Precondition: must have an array with values in it to copy
      * Postcondition: changes the size of array from oldSize to newSize
      */
void resize(double *&a, int oldSize, int newSize) {
	double *b = new double[newSize]();
	if (newSize > oldSize) {
		for (int i = 0; i < oldSize; i++) {
			b[i] = *&a[i];
		}
	} else if (newSize < oldSize) {
		for (int i = 0; i < newSize; i++) {
			b[i] = *&a[i];
		}
	} delete [] a;
	a = b;				// a points to the same location b points to
}

/* array method...
      * @param: *a1, a double dereference pointer
      * @param: size1, an int
      * @param: *a2, a double dereference pointer
      * @param: size2, an int
      * @param: *&a3, a double dereference pointer
      * @param: size3, an int
      * Precondition: must have two arrays with values declared to be copied
      * Postcondition: makes an array, *&a3, that contains the values of array, *a1,
      * 			   followed by the values of array, *a2
      */
void concat(double *a1, int size1, double *a2, int size2, double *&a3, int &size3) {
	// size3 equals size1 plus size2
	size3 = size1 + size2;
	double *b = new double[size3]();

	// loop through array b and add first array's values to b
	for (int i = 0; i < size1; i++) {
		b[i] = a1[i];
	}

	// make an int j, which starts at 0, to use as an index to copy down the second
	// array's values
	int j = 0;

	// loop through array b starting at size1 (where we left off copying array1's
	// values), loop until i is less than size3, and copy array2's values to b
	for (int i = size1; i < size3; i++) {
		b[i] = a2[j];
		j++;
	} delete [] a3;
	a3 = b;				// a3 points to the same location b points to
}


ajs244@gold24:~/cs112/proj2$ cat array.cpp[1P[1@Aa[1@ [1PA[1Pa[1P[1@ [1@Array[1@T[1@e[1@t[1@e[1P[1P[1@s[1@t[1@e[1@r.cp[K[1Ppp h
/*ArrayTester.h provides a class to test C-style array operations.
 * Student: Advait Scaria
 * Date: 09/18/2018
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
#ifndef ARRAY_TESTER_H_
#define ARRAY_TESTER_H_

#include "array.h"  // the functions we are testing
#include <iostream>
#include <cassert>
using namespace std;

class ArrayTester
{
public:
	ArrayTester();
	virtual ~ArrayTester();
	void runTests();
	void setup();
	void cleanup();
	void testInitialize();
	void testPrint();
	void testAverage();
	void testSum();
	void testResize();
	void testConcat();
	void testFill();
	void testRead();
private:
	double * a1;
	double * a2;
	double * a3;
};

#endif /*ARRAY_TESTER_H_*/
ajs244@gold24:~/cs112/proj2$ cat ArrayTester.h vpp   cpp
/* ArrayTester.cpp defines the methods to test C-style array operations.
 * Student: Advait Scaria
 * Date: 09/18/2018
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
 #include "ArrayTester.h"
 #include "array.h"
 #include <fstream>
 using namespace std;

ArrayTester::ArrayTester() {
	a1 = a2 = a3 = NULL;
}

ArrayTester::~ArrayTester() {
        cleanup();
}

void ArrayTester::cleanup() {
	delete [] a1; a1 = NULL;
	delete [] a2; a2 = NULL;
	delete [] a3; a3 = NULL;
}

void ArrayTester::runTests() {
	testInitialize();
	testPrint();
	testAverage();
	testSum();
	testResize();
	testConcat();
	testFill();
	testRead();
	cout << "All tests passed!" << endl;
}

void ArrayTester::setup() {
	a1 = new double[3];
	for (int i = 0; i < 3; i++) {
		a1[i] = i+1;
	}
	a2 = new double[4];
	for (int i = 0; i < 4; i++) {
		a2[i] = i+2;
	}
	a3 = new double[5];
	for (int i = 0; i < 5; i++) {
		a3[i] = i+3;
	}
}

void ArrayTester::testInitialize()  {
	cout << "Testing initialize()... " << flush;
	setup();
	initialize(a1, 3);
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	initialize(a2, 4);
	for (int i = 0; i < 4; i++) {
		assert( a2[i] == i+1 );
	}
	initialize(a3, 5);
	for (int i = 0; i < 5; i++) {
		assert( a3[i] == i+1 );
	}
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testPrint() {
	cout << "Testing print()... " << flush;
	setup();
	cout << "\nExpecting 3 values: 1, 2, 3..." << endl;
	print(a1, 3);
	cout << "\nExpecting 4 values: 2, 3, 4, 5..." << endl;
	print(a2, 4);
	cout << "\nExpecting 5 values: 3, 4, 5, 6, 7..." << endl;
	print(a3, 5);
        cleanup();
	cout << "\nPassed!" << endl;
}

void ArrayTester::testAverage() {
	cout << "Testing average()... " << flush;
	setup();
	assert( average(a1, 3) == 2  );
	assert( average(a2, 4) == 3.5 );
	assert( average(a3, 5) == 5 );
        cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testSum() {
	cout << "Testing sum()... " << flush;
	setup();
	assert( sum(a1, 3) == 6 );
	assert( sum(a2, 4) == 14 );
	assert( sum(a3, 5) == 25 );
	cleanup();
	cout << "Passed!" << endl;
}

void ArrayTester::testResize() {
	cout << "Testing resize()... " << flush;
	setup();
	double *temp1 = a1;
	resize(a1, 3, 7);
	assert( a1 != temp1 );
	for (int i = 0; i < 3; i++) {
		assert( a1[i] == i+1 );
	}
	for (int i = 3; i < 7; i++) {
		assert( a1[i] == 0 );
	}

	double *temp3 = a3;
	resize(a3, 5, 3);
	assert( temp3 != a3 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+3 );
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testConcat() {
	cout << "Testing concat()... " << flush;
	setup();
	int size1 = 3, size2 = 4, size3 = 5;
	double *temp1 = a1;
	double *temp2 = a2;
	double *temp3 = a3;
	concat(a1, size1, a2, size2, a3, size3);
	assert( temp1 == a1 );
	assert( temp2 == a2 );
        /* the next assertion assumes that the new array's base
         *  address is different from the old array's base address,
         *  which may not be true. If concat() seems to be right,
         *  and passes all assertions except this one, you may
         *  comment out this assertion.
         */
	assert( temp3 != a3 );
	assert( size1 == 3 );
	assert( size2 == 4 );
	assert( size3 == 7 );
	for (int i = 0; i < 3; i++) {
		assert( a3[i] == i+1 );
	}
	int j = 2;
	for (int i = 3; i < 7; i++) {
		assert( a3[i] == j );
		j++;
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}


void ArrayTester::testFill() {
	cout << "Testing fill()... " << flush;
	setup();
	int size1 = 3;
	double *temp1 = a1;
	fill("arrayData.txt", a1, size1);
	assert( a1 != temp1 );
	assert( size1 == 6);
	for (int i = 0; i < size1; i++) {
		assert( a1[i] == i+10 );   // values should be 10, 11, 12, 13, 14, 15
	}
        cleanup();
	cout << "Passed!  But double-check that you deleted the old array..." << endl;
}

void ArrayTester::testRead() {
	cout << "Testing read()... " << flush;
	double* a4 = new double[6];
	ifstream fin("arrayData.txt");
	assert( fin.is_open() );
	string firstLine, secondLine;
	getline(fin, firstLine);         // skip past the '6' that's there for fill()...
	getline(fin, secondLine);        // skip past the '10'
	read(fin, a4, 5);                // read 5 values instead of 6
	for (int i = 0; i < 5; i++) {    // check what we got:
		assert( a4[i] == i+11 ); //  values should be 11, 12, 13, 14, 15,
	}                                //   so test-values differ from fill()
        delete [] a4;
	cout << "Passed!" << endl;
}

ajs244@gold24:~/cs112/proj2$ cat ArrayTester.cpp               main.cpp
/* main.cpp drives the testing of the array operations.
 * Student: Advait Scaria
 * Date: 09/18/2018
 * Begun by: Joel Adams, for CS 112 at Calvin College.
 */
 
#include "ArrayTester.h"

int main() {
	ArrayTester at;
	at.runTests();
}
ajs244@gold24:~/cs112/proj2$ cat main.cpp=         arrayDaa ta.txt
6
10
11
12
13
14
15
ajs244@gold24:~/cs112/proj2$ [Kajs244@gold24:~/cs112/proj2$ cd Debug
ajs244@gold24:~/cs112/proj2/Debug$ ls
array.d  array.o  ArrayTester.d  ArrayTester.o	main.d	main.o	makefile  objects.mk  proj2  sources.mk  subdir.mk
ajs244@gold24:~/cs112/proj2/Debug$ make all
make: Nothing to be done for 'all'.
ajs244@gold24:~/cs112/proj2/Debug$ cd ..
ajs244@gold24:~/cs112/proj2$ ./Debug/proj2
Testing initialize()... Passed!
Testing print()... 
Expecting 3 values: 1, 2, 3...
1	2	3	
Expecting 4 values: 2, 3, 4, 5...
2	3	4	5	
Expecting 5 values: 3, 4, 5, 6, 7...
3	4	5	6	7	
Passed!
Testing average()... Passed!
Testing sum()... Passed!
Testing resize()... Passed!  But double-check that you deleted the old array...
Testing concat()... Passed!  But double-check that you deleted the old array...
Testing fill()... Passed!  But double-check that you deleted the old array...
Testing read()... Passed!
All tests passed!
ajs244@gold24:~/cs112/proj2$ exit

Script done on Mon 24 Sep 2018 02:48:21 PM EDT
