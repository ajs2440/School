int main() {
	List<double> aList; // 1
	aList.prepend(55); // 2
	aList.prepend(44); // 3
	aList.prepend(33); // 4
}

template<class Item>
class List {
public:
	List() { myFirst = NULL; mySize = 0; }
	unsigned getSize() const { return mySize; }
	void prepend(const Item& it) { myFirst = new Node(it, myFirst); mySize++;}
	Item getFirst() const { return myFirst->myItem; }
private:
	struct Node {
		Node(const Item& it, Node* nxt) { myItem = it; myNext = nxt; }
		Item myItem;
		Node* myNext;
	};
	Node* myFirst;
	unsigned mySize;
	friend class ListTester;
};

