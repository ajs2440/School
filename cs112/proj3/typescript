Script started on Mon 01 Oct 2018 02:51:44 PM EDT
ajs244@gold25:~/cs112/proj3$ ls
Application.cpp  tester.cpp  Vec.h	       vecTest1.txt	 VecTester.cpp
Application.h	 typescript  vecStreamOut.txt  vecTest2Copy.txt  VecTester.h
Debug		 Vec.cpp     vecTest1Copy.txt  vecTest2.txt
ajs244@gold25:~/cs112/proj3$ cat Application  .h
/* Application.h provides a class named Application.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef APPLICATION_H_
#define APPLICATION_H_

class Application {
public:
	Application();
	virtual ~Application();

	void run();
};

#endif /* APPLICATION_H_ */
ajs244@gold25:~/cs112/proj3$ cat Application.h cpp
/* Application.cpp defines the methods for Application objects.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "Application.h"
#include "Vec.h"
#include <iostream>
using namespace std;

Application::Application() {
	// TODO Auto-generated constructor stub

}

Application::~Application() {
	// TODO Auto-generated destructor stub
}

/* Application run method......written by: Advait Scaria
      * runs the Vec Application where users can input their starting Vec point,
      * add details of more Vecs they want to use for navigation, and the Application
      * will calculate the user'sfinal point by outputting the sum of all the input
      * Vecs.
      */
void Application::run() {
	unsigned size;
	Item coordinate;
	Vec origin;
	Vec final;
	unsigned numOfVecs;

	cout << "\nWelcome to the Vec Application! \n";

	// defines number of dimensions, i.e. the size of the Vec objects
	cout << "\nEnter the number of dimensions: ";
	cin >> size;
	origin.setSize(size);
	cout << "\n";

	// defines the coordinates of the starting point, i.e. the Item values in the origin
	// Vec
	for (unsigned i = 0; i < origin.getSize(); ++i) {
		cout << "Enter coordinate " << i + 1 << " of the starting point: ";
		cin >> coordinate;
		origin.setItem(i, coordinate);
	}

	cout << "\nStarting point = {";
	for (unsigned i = 0; i < origin.getSize(); ++i) {
		if (origin.getSize() == 1) {
			cout << origin.getItem(0) << "}";
		} else if (i < origin.getSize() - 1) {
			cout << origin.getItem(i) << ", ";

		}
		if (i == origin.getSize() - 1) {
			cout << origin.getItem(i) << "}";
		}
	}

	// initialize final vector to be the same as origin vector so we can use final when
	// adding the vectors later on
	final = origin;

	// defines how many vectors user wants to use for the program
	cout << "\n";
	cout << "\nEnter number of vectors: ";
	cin >> numOfVecs;

	// defines the coordinates of the vectors user wants to use for the program and
	// calculates the sum of the vectors
	for (unsigned i = 0; i < numOfVecs; ++i) {
		cout << "\nEnter details of vector " << i + 1 << ": \n";
		Vec vector;
		vector.setSize(origin.getSize());
		for (unsigned j = 0; j < origin.getSize(); ++j) {
			cout << "\t Enter coordinate " << j + 1
					<< " of vector " << i + 1 << ": ";
			cin >> coordinate;
			vector.setItem(j, coordinate);
		}
		cout << "\n\t Vector " << i + 1 << " = {";
		for (unsigned i = 0; i < vector.getSize(); ++i) {
			if (vector.getSize() == 1) {
				cout << vector.getItem(0) << "}";
			} else if (i < vector.getSize() - 1) {
				cout << vector.getItem(i) << ", ";

			} if (i == vector.getSize() - 1) {
				cout << vector.getItem(i) << "}";
			}
		}
		cout << "\n";

		final = final + vector;
	}

	// displays the calculated coordinates/sum of the final vector
	cout << "\nFinal vector coordinates/Sum of starting point and vectors = {";
	for (unsigned i = 0; i < final.getSize(); ++i) {
		if (final.getSize() == 1) {
			cout << final.getItem(0) << "}";
		} else if (i < final.getSize() - 1) {
			cout << final.getItem(i) << ", ";

		} if (i == final.getSize() - 1) {
			cout << final.getItem(i) << "}\n";
		}
	}
}
ajs244@gold25:~/cs112/proj3$ cat Vec.h
/* Vec.h provides a simple vector class named Vec.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#ifndef VEC_H_
#define VEC_H_

#include <iostream>
using namespace std;

typedef double Item;

class Vec {
public:
	Vec();
	Vec(unsigned size);
	Vec(const Vec& original);
	virtual ~Vec();

	Vec& operator=(const Vec& original);
	unsigned getSize() const;
	void setItem(unsigned index, const Item& it);
	Item getItem(unsigned index) const;
	void setSize(unsigned newSize);
	bool operator==(const Vec& v2);
	void writeTo(ostream& out) const;
	void readFrom(istream& in);
	
	const Item& operator[](unsigned index) const;
	Item& operator[](unsigned index);
	bool operator!=(const Vec& v2) const;
	void readFrom(const string& fileName);
	void writeTo(const string& fileName) const;
	Vec operator+(const Vec& v2) const;
	Vec operator-(const Vec& v2) const;
	Item operator*(const Vec& v2) const;

private:
	unsigned mySize;
	Item * myArray;

	friend class VecTester;
};

#endif /*VEC_H_*/
ajs244@gold25:~/cs112/proj3$ cat Vec.h cpp
/* Vec.cpp defines the methods for Vec, a simple vector class.
 *
 * Member 1: Advait Scaria
 * Date: 09/25/2018
 * Methods written: subscript (read version), operator!=(), readFrom(), operator-()
 *
 * Member 2: Joel C. Adams
 * Date: 09/29/2018
 * Methods written: subscript (write version), writeTo(), operator+(), operator*()
 *
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "Vec.h"
#include <stdexcept>
#include <iostream>
#include <fstream>
#include <cstring>
#include <string>
#include <cassert>

Vec::Vec() {
	mySize = 0;
	myArray = NULL;
}

Vec::Vec(unsigned size) {
	mySize = size;
	if (size > 0) {
		myArray = new Item[size]();
	} else {
		myArray = NULL;
	}
}

Vec::Vec(const Vec& original) {
	mySize = original.mySize;
	if (original.mySize > 0) {
		myArray = new Item[original.mySize]();
		for (unsigned i = 0; i < original.mySize; ++i) {
			myArray[i] = original.myArray[i];
		}
	} else { myArray = NULL; }
}

Vec::~Vec() {
	delete [] myArray;
	mySize = 0;
	myArray = NULL;
}

Vec& Vec::operator=(const Vec& original) {
	if (myArray == original.myArray && mySize == original.mySize) {
		mySize = original.mySize;
		myArray = original.myArray;
	} else {
		delete[] myArray;
		mySize = original.mySize;
		if (original.mySize > 0) {
			myArray = new Item[original.mySize]();
			for (unsigned i = 0; i < original.mySize; ++i) {
				myArray[i] = original.myArray[i];
			}
		} else { myArray = NULL; }
	}
    return *this;
}

unsigned Vec::getSize() const {
	return mySize;
}

void Vec::setItem(unsigned index, const Item& it) {
	if (index < 0 or index >= mySize) {
		throw range_error("Index out of range");
	} else { myArray[index] = it; }
}

Item Vec::getItem(unsigned index) const {
	if (index < 0 or index >= mySize) {
		throw range_error("Index out of range");
	} else { return myArray[index]; }
}

void Vec::setSize(unsigned newSize) {
	if (mySize != newSize) {
		if (newSize == 0) {
			delete [] myArray;
			myArray = NULL;
			mySize = 0;
		} else {
			Item * newArray = new Item[newSize]();
			if (mySize < newSize) {
				for (unsigned i = 0; i < mySize; ++i) {
					newArray[i] = myArray[i];
				}
			} else {
				for (unsigned i = 0; i < newSize; ++i) {
					newArray[i] = myArray[i];
				}
			} mySize = newSize;
			delete [] myArray;
			myArray = newArray;
		}
	}
}

bool Vec::operator==(const Vec& v2) {
	if (mySize != v2.mySize) {
		return false;
	} else {
		for (unsigned i = 0; i < mySize; ++i) {
			if (myArray[i] != v2.myArray[i]) {
				return false;
			}
		}
	}
	return true;
}

void Vec::writeTo(ostream& out) const {
	for (unsigned i = 0; i < mySize; ++i) {
		out << myArray[i] << endl;
	}
}

void Vec::readFrom(istream& in) {
	for (unsigned i = 0; i < mySize; ++i) {
		in >> myArray[i];
	}
}


/* subscript (read version)...written by: Advait Scaria
 	 * @param index, an unsigned value.
 	 * Precondition: index < mySize
 	 * Return: myArray[index]
 	 */
const Item& Vec::operator[](unsigned index) const {
	if (index >= mySize) {
		throw range_error("Vec::operator[]: index is too large");
	} else { return myArray[index]; }
}

/* subscript (write version)...written by: Prof. Joel C. Adams
 	 * @param index, an unsigned value.
 	 * Precondition: index < mySize
 	 * Return: myArray[index]
 	 */
Item& Vec::operator[](unsigned index)  {
	if (index >= mySize) {
		throw range_error("Vec::operator[]: index is too large");
	} else { return myArray[index]; }
}

/* Vec inequality...written by: Advait Scaria
 	 * @param: v2, a Vec.
 	 * Precondition: 2 Vec objects needed for comparison
 	 * Return: a true or false bool
	 */
bool Vec::operator!=(const Vec& v2) const {
	if (mySize != v2.mySize) {
		return true;
	} else {
		for (unsigned i = 0; i < mySize; ++i) {
			if (myArray[i] != v2.myArray[i]) {
				return true;
			}
		}
	} return false;
}

/* read from file method......written by: Advait Scaria
      * @param: fileName, a string.
      * Precondition: a text file with corresponding fileName must exist
      * 			  with valid size and Item values inside that file
      * Postcondition: Vec object has within it initialized size and values from file
      */
void Vec::readFrom(const string& fileName) {
	delete [] myArray;
	ifstream fin (fileName.c_str());
	assert (fin.is_open());
	fin >> mySize;
	myArray = new Item[mySize];
	for (unsigned i = 0; i < mySize; ++i) {
		fin >> myArray[i];
	}
	fin.close();
}

/* file output method...written by: Prof. Joel C. Adams
 	 * @param: fileName, a string.
 	 * Precondition: fileName contains the name of an output file.
 	 * Postcondition: the first line of fileName contains mySize
 	 *                && the rest of my Items are in fileName,
 	 *                one per line.
 	 */
void Vec::writeTo(const string& fileName) const {
	ofstream fout (fileName.c_str());
	assert (fout.is_open());
	fout << mySize << "\n";
	for (unsigned i = 0; i < mySize; ++i) {
		fout << myArray[i] << "\n";
	}
	fout.close();
}

/* Vec addition...written by: Prof. Joel C. Adams
 	 * @param: v2, a Vec.
 	 * Precondition: mySize == v2.mySize.
 	 * Return: a Vec in which each Item[i]
 	 *          is the sum of me[i] + v2[i].
	 */
Vec Vec::operator+(const Vec& v2) const {
	if (mySize != v2.mySize) {
		throw length_error("Vec::operator+: lengths do not match");
	}

	Vec result(mySize);
	for (unsigned i = 0; i < mySize; ++i) {
		result.myArray[i] = myArray[i] + v2.myArray[i];
	}
	return result;
}

/* Vec addition...written by: Advait Scaria
 	 * @param: v2, a Vec.
 	 * Precondition: mySize == v2.mySize.
 	 * Return: a Vec in which each Item[i]
 	 *          is the difference of me[i] + v2[i].
	 */
Vec Vec::operator-(const Vec& v2) const {
	if (mySize != v2.mySize) {
		throw length_error("Vec::operator-: lengths do not match");
	}

	Vec result(mySize);
	for (unsigned i = 0; i < mySize; ++i) {
		result.myArray[i] = myArray[i] - v2.myArray[i];
	}
	return result;
}

/* Vec dot product...written by: Prof. Joel C. Adams
 	 * @param: v2, a Vec.
 	 * Precondition: mySize == v2.mySize.
 	 * Return:an Item which is the sum of
 	 *           me[i] * v2[i], for all i.
 	 */
Item Vec::operator*(const Vec& v2) const {
	if (mySize != v2.mySize) {
		throw length_error("Vec::operator*: lengths do not match");
	}
	Item result = Item(0);
	for (unsigned i = 0; i < mySize; ++i) {
		result += myArray[i] * v2.myArray[i];
	}
	return result;
}
ajs244@gold25:~/cs112/proj3$ cat Vec.cpp[1P[1@c[1@T[1@e[1@s[1@t[1@e[1@r.cpp   h
/* VecTester.h provides unit tests for Vec, a simple vector class.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#ifndef VECTESTER_H_
#define VECTESTER_H_

#include "Vec.h"

class VecTester {
public:
	void runTests() const;
	void testDefaultConstructor() const;
	void testExplicitConstructor() const;
	void testDestructor() const;
	void testGetSize() const;
	void testSetItem() const;
	void testGetItem() const;
	void testSetSize() const;
	void testCopyConstructor() const;
	void testAssignment() const;
	void testEquality() const;
	void testWriteToStream() const;
	void testReadFromStream() const;
	void testSubscript() const;
	void testInequality() const;
	void testAddition() const;
	void testSubtraction() const;
	void testDotProduct() const;
	void testReadFromFile() const;
	void testWriteToFile() const;
};

#endif /*VECTESTER_H_*/
ajs244@gold25:~/cs112/proj3$ cat VecTester.h cpp
/* VecTester.cpp defines the unit test-methods for Vec, a simple vector class.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */
 
#include "VecTester.h"
#include <iostream>     // cout, cerr, ...
#include <fstream>      // ifstream, ofstream, ...
#include <cassert>      // assert()
#include <cstdlib>      // exit()
#include <stdexcept>    // range_error, ...
using namespace std;

void VecTester::runTests() const {
	cout << "Testing class Vec" << endl;
	testDefaultConstructor();
	testExplicitConstructor();
	testCopyConstructor();
	testDestructor();
	testAssignment();
	testGetSize();
	testSetItem();
	testGetItem();
	testSetSize();
	testEquality();
	testWriteToStream();
	testReadFromStream();
	testSubscript();
	testInequality();
	testAddition();
	testSubtraction();
	testDotProduct();
	testReadFromFile();
	testWriteToFile();
	cout << "All tests passed!" << endl;
}

void VecTester::testDefaultConstructor() const {
	cout << "Testing default constructor... " << flush;
	Vec v;
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed!" << endl;
}

void VecTester::testExplicitConstructor() const {
	cout << "Testing explicit constructor... " << flush;
	cout << " 1 " << flush;
	Vec v1(3);
	assert( v1.mySize == 3 );
	assert( v1.myArray != NULL );
	for (int i = 0; i < 3; i++) {
		assert( v1.myArray[i] == 0 );
	}
	cout << " 2 " << flush;
	Vec v2(8);
	assert( v2.mySize == 8 );
	assert( v2.myArray != NULL );
	for (int i = 0; i < 8; i++) {
		assert( v2.myArray[i] == 0 );
	}
	cout << " 3 " << flush;
	Vec v3(0);
	assert( v3.mySize == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testCopyConstructor() const {
	cout << "Testing copy constructor..." << flush;
	cout << " 1 " << flush;
	Vec v1;
	Vec v2(v1);
	assert( v2.mySize == 0 );
	assert( v2.myArray == NULL);

	cout << " 2 " << flush;
	Vec v3(5);
	Vec v4(v3);
	assert(v4.mySize == 5);
	assert(v4.myArray != NULL);
	assert(v4.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == 0 );
	}

	cout << " 3 " << flush;
	Vec v5(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.myArray[i] = (i+1);
	}
	Vec v6(v5);
	assert( v6.mySize == 5 );
	assert( v6.myArray != NULL );
	assert( v6.myArray != v5.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == v5.myArray[i] );
	}
	cout << "Passed!" << endl;
}

void VecTester::testDestructor() const {
	cout << "Testing destructor... " << flush;
	Vec v(5);
	v.~Vec();
	assert( v.mySize == 0 );
	assert( v.myArray == NULL );
	cout << "Passed, but make sure ~Vec() is returning the array's memory to the system!" << endl;
}

void VecTester::testAssignment() const {
	cout << "Testing =..." << flush;
	// empty-to-empty
	Vec v, v0;
	v = v0;
	assert(v.mySize == 0);
	assert(v.myArray == NULL);
	cout << " 0 " << flush;
	// empty-to-nonempty
	Vec v1;
	Vec v2(5);
	v2 = v1;
	assert(v2.mySize == 0);
	assert(v2.myArray == NULL);
	cout << " 1 " << flush;
	// nonempty-to-empty
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.myArray[i] = (i+1);
	}
	Vec v4;
	v4 = v3;
	assert( v4.mySize == 5 );
	assert( v4.myArray != v3.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v4.myArray[i] == (i+1) );
	}
	cout << " 2 " << flush;
	// nonempty-to-nonempty (larger into smaller)
	Vec v5(2);
	for (unsigned i = 0; i < 2; i++) {
		v5.myArray[i] = (i+1)*10;
	}
	v5 = v3;
	assert(v5.mySize == 5);
	assert(v5.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v5.myArray[i] == (i+1) );
	}
	cout << " 3 " << flush;
	// nonempty-to-nonempty (smaller into larger)
	Vec v6(7);
	for (unsigned i = 0; i < 7; i++) {
		v6.myArray[i] = (i+1)*10;
	}
	v6 = v3;
	assert(v6.mySize == 5);
	assert(v6.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v6.myArray[i] == (i+1) );
	}
	cout << " 4 " << flush;
	// nonempty-to-nonempty (equal sized)
	Vec v7(5);
	for (unsigned i = 0; i < 5; i++) {
		v7.myArray[i] = (i+1)*10;
	}
	v7 = v3;
	assert(v7.mySize == 5);
	assert(v7.myArray != v3.myArray);
	for (unsigned i = 0; i < 5; i++) {
		assert( v7.myArray[i] == (i+1) );
	}
	cout << " 5 " << flush;
	// assignment chaining
	Vec v8;
	Vec v9(4);
	v9 = v8 = v3;
	assert( v9.mySize == 5 );
	assert( v9.mySize == 5 );
	assert( v8.myArray != v3.myArray );
	assert( v8.myArray != v3.myArray );
	assert( v9.myArray != v8.myArray );
	for (unsigned i = 0; i < 5; i++) {
		assert( v8.myArray[i] == (i+1) );
		assert( v9.myArray[i] == (i+1) );
	}
	cout << " 6 " << flush;
	// self-assignment (idiotic but legal)
	v3 = v3;
	assert( v3.mySize == 5 );
	assert( v3.myArray != NULL );
	for (unsigned i = 0; i < 5; i++) {
		assert(v3.myArray[i] == (i+1) );
	}
	cout << " 7 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testGetSize() const {
	cout << "Testing getSize()..." << flush;
	Vec v1;
	assert( v1.getSize() == 0 );
	cout << " 1 " << flush;
	Vec v2(5);
	assert( v2.getSize() == 5 );
	cout << " 2 " << flush;
	cout << "Passed!" << endl;
}

void VecTester::testSetItem() const {
	cout << "Testing setItem()... " << flush;
	// empty case
	Vec v0;
	try {
		v0.setItem(0, 11);
		cerr << "setItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// nonempty case, valid subscript
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.myArray[i] == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty case, invalid subscript
	Vec v2(3);
	try {
		v2.setItem(3, 33);
		cerr << "setItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testGetItem() const {
	cout << "Testing getItem()... " << flush;
	// empty Vec
	Vec v0;
	try {
		v0.getItem(0);
		cerr << "getItem() succeeded on empty Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 0 " << flush;
	}
	// non-empty, valid access
	Vec v(5);
	for (unsigned i = 0; i < 5; i++) {
		v.setItem(i, i+1);
	}
	for (unsigned i = 0; i < 5; i++) {
		assert( v.getItem(i) == (i+1) );
	}
	cout << " 1 " << flush;
	// nonempty Vec, invalid index
	Vec v2(3);
	try {
		v2.getItem(3);
		cerr << "getItem() succeeded beyond end of Vec";
		exit(1);
	} catch (range_error&) {
		cout << " 2 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSetSize() const {
	cout << "Testing setSize()..." << flush;
	// empty
	Vec v0;
	v0.setSize(3);
	assert( v0.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v0.getItem(i) == 0 );
	}
	cout << " 0 " << flush;

	// non-empty, increasing
	Vec v1(5);
	for (unsigned i = 0; i < 5; i++) {
		v1.setItem(i, i+1);
	}
	Item * saveAddress = v1.myArray;
	v1.setSize(8);
	assert( v1.getSize() == 8 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v1.getItem(i) == (i+1) );
	}
	for (unsigned i = 5; i < 8; i++) {
		assert( v1.getItem(i) == 0 );
	}
	assert( v1.myArray != saveAddress );
	cout << " 1 " << flush;

	// non-empty, decreasing
	Vec v2(5);
	for (unsigned i = 0; i < 5; i++) {
		v2.setItem(i, i+1);
	}
	saveAddress = v2.myArray;
	v2.setSize(3);
	assert( v2.getSize() == 3 );
	for (unsigned i = 0; i < 3; i++) {
		assert( v2.getItem(i) == (i+1) );
	}
	assert( v2.myArray != saveAddress );
	cout << " 2 " << flush;

	// non-empty, same-size
	Vec v3(5);
	for (unsigned i = 0; i < 5; i++) {
		v3.setItem(i, i+1);
	}
	saveAddress = v3.myArray;
	v3.setSize(5);
	assert( v3.getSize() == 5 );
	for (unsigned i = 0; i < 5; i++) {
		assert( v3.getItem(i) == (i+1) );
	}
	assert( v3.myArray == saveAddress );
	cout << " 3 " << flush;
	// set size to zero
	v3.setSize(0);
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 4 " << flush;
	cout << "Passed!" << endl;
}


void VecTester::testEquality() const {
	cout << "Testing ==..." << flush;
	// empty case
	Vec v1;
	Vec v2;
	assert( v1 == v2 );
	cout << " 1 " << flush;

	// nonempty, same size, default values
	Vec v3(5);
	Vec v4(5);
	assert( v3 == v4 );
	cout << " 2 " << flush;

	// nonempty, same size, set values
	Vec v5(5);
	Vec v6(5);
	for (unsigned i = 0; i < 5; i++) {
		v5.setItem(i, i+1);
		v6.setItem(i, i+1);
	}
	assert( v5 == v6 );
	cout << " 3 " << flush;

	// empty vs nonempty
	Vec v7;
	Vec v8(5);
	assert( !(v7 == v8) );
	cout << " 4 " << flush;

	// nonempty, same size, first value different
	Vec v9(5);
	Vec v10(5);
	Vec v11(5);
	Vec v12(5);
	v10.setItem(0, 1);
	assert( !(v9 == v10) );
	cout << " 5 " << flush;

	// nonempty, same size, middle value different
	v11.setItem(2, 1);
	assert( !(v9 == v11) );
	cout << " 6 " << flush;

	// nonempty, same size, last value different
	v12.setItem(4, 1);
	assert( !(v9 == v12) );
	cout << " 7 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testWriteToStream() const {
      cout << "Testing writeTo(ostream)... " << flush;
      Vec v1(5);
      for (unsigned i = 0; i < 5; i++) {
              v1.setItem(i, i+10);
      }
	// write to an ofstream instead of cout, to automate the test
      ofstream fout("vecStreamOut.txt");
      assert( fout.is_open() );
      fout << v1.getSize() << "\n";
      v1.writeTo(fout);
	fout.close();
	// now read in what we just wrote...
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
      unsigned size;
      fin >> size;
      assert( size == 5 );
      double value;
      for (unsigned i = 0; i < 5; i++) {
              fin >> value;
              assert( value == i+10 );
      }
      cout << "Passed! See 'vecStreamOut.txt' for values..." <<
      endl;
}

void VecTester::testReadFromStream() const {
      cout << "Testing readFrom(istream)... " << flush;
	// an ifstream is-an istream, so use one to automate the test
      ifstream fin("vecStreamOut.txt");
      assert( fin.is_open() );
	// get the size and build the Vec
      unsigned size;
      fin >> size;
      assert( size == 5 );
      Vec v(size);
	// test readFrom()
      v.readFrom(fin);
      for (unsigned i = 0; i < 5; i++) {
              assert( v.getItem(i)== i+10 );
      }
	fin.close();
      cout << "Passed!" << endl;
}

void testConstSubscript(const Vec& v) {
	assert( v[0] == 11 );
	assert( v[1] == 22 );
	assert( v[2] == 33 );
}

void VecTester::testSubscript() const {
	cout << "Testing subscript... " << flush;
	// empty case
	Vec v0;
	try {
		v0[0];
		cerr << "Subscript worked on empty Vec";
		exit(1);
	} catch (const range_error& re) {
		cout << " 0 " << flush;
	}
	// non-empty case, write version
	Vec v1(3);
	v1[0] = 11;
	v1[1] = 22;
	v1[2] = 33;
	assert( v1.getItem(0) == 11 );
	assert( v1.getItem(1) == 22 );
	assert( v1.getItem(2) == 33 );
	cout << " 1 " << flush;
	// non-empty case, read version
	testConstSubscript(v1);
	cout << " 2 " << flush;
	cout << " Passed!" << endl;
}

void VecTester::testInequality() const {
	cout << "Testing !=... " << flush;
	// empty
	Vec v0;
	Vec v1;
	assert( !(v0 != v1) );
	cout << " 0 " << flush;
	// empty vs nonempty
	Vec v2(3);
	assert( v1 != v2 );
	cout << " 1 " << flush;
	// equal sized, same values
	Vec v3(3);
	Vec v4(3);
	assert( !(v3 != v4) );
	cout << " 2 " << flush;
	// equal sized, different values
	for (unsigned i = 0; i < 3; i++) {
		v4.myArray[i] = i+1;
	}
	assert( v3 != v4 );
	cout << " 3 " << flush;

	cout << "Passed!" << endl;
}

void VecTester::testAddition() const {
	cout << "Testing +... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;    // for test 2 below
	Vec v3 = v1 + v2;
	assert( v3.getItem(0) == 3 );
	assert( v3.getItem(1) == 6 );
	assert( v3.getItem(2) == 9 );
	cout << " 1 " << flush;
	// addition should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 + v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 + v4;
		cerr << "v2 + v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (length_error& le) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testSubtraction() const {
	cout << "Testing -... " << flush;
	// nonempty
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	Vec v3 = v1 - v2;
	assert( v3.getItem(0) == -1 );
	assert( v3.getItem(1) == -2 );
	assert( v3.getItem(2) == -3 );
	cout << " 1 " << flush;
	// subtraction should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	v3 = v4 - v5;
	assert( v3.getSize() == 0 );
	assert( v3.myArray == NULL );
	cout << " 3 " << flush;
	// different sizes
	try {
		v3 = v2 - v4;
		cerr << "v2 - v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (length_error& le) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testDotProduct() const {
	cout << "Testing *... " << flush;
	Vec v1(3);
	Vec v2(3);
	v1.setItem(0, 1);
	v1.setItem(1, 2);
	v1.setItem(2, 3);
	v2.setItem(0, 2);
	v2.setItem(1, 4);
	v2.setItem(2, 6);
	Vec saveV1 = v1;  // for test 2 below
	double product = v1 * v2;
	assert( product == 28 );
	cout << " 1 " << flush;
	// dot product should not change the left operand
	assert( v1.getItem(0) == saveV1.getItem(0) );
	assert( v1.getItem(1) == saveV1.getItem(1) );
	assert( v1.getItem(2) == saveV1.getItem(2) );
	cout << " 2 " << flush;
	// empty
	Vec v4, v5;
	product = v4 * v5;
	assert( product == 0 );
	cout << " 3 " << flush;
	// different sizes
	try {
		product = v2 * v4;
		cerr << "v2 * v4 succeeded for Vecs of different sizes";
		exit(1);
	} catch (length_error& le) {
		cout << " 4 " << flush;
	}
	cout << "Passed!" << endl;
}

void VecTester::testReadFromFile() const {
	cout << "Testing readFrom()... " << flush;
	Vec v1;
	v1.readFrom("vecTest1.txt");
	assert( v1.getSize() == 3 );
	assert( v1.myArray != NULL );
	assert( v1.getItem(0) == 1 );
	assert( v1.getItem(1) == 2 );
	assert( v1.getItem(2) == 3 );
	cout << " 1 " << flush;

	Vec v2(5);
	Item* oldAddr = v2.myArray;
	v2.readFrom("vecTest2.txt");
	assert( v2.getSize() == 4 );
	cout << " 2 " << flush;
	assert( v2.myArray != NULL );
	assert( v2.getItem(0) == 2 );
	assert( v2.getItem(1) == 4 );
	assert( v2.getItem(2) == 6 );
	assert( v2.getItem(3) == 8 );
       /* the last assertion assumes that the new array's base
        *  address is different from the old array's base address,
        *  which may not be true. If your method seems to be right,
	*  is correctly using delete to deallocate the old array,
        *  and passes all assertions except this one, you may
        *  comment out this assertion.
        */
//	assert( v2.myArray != oldAddr );
//	cout << " 3 " << flush;
	cout << "Passed! Make sure you close the file..." << endl;
}

void VecTester::testWriteToFile() const {
	cout << "Testing writeTo()... " << flush;
	// read a vector we know into an empty Vec...
	Vec v1;
	v1.readFrom("vecTest1.txt");
	// make a copy of it in a different file
	v1.writeTo("vecTest1Copy.txt");
	cout << " 1 " << flush;
	cout << "vecTest1Copy.txt created " << flush;
	// read in the copy, and check it
	Vec v3;
	v3.readFrom("vecTest1Copy.txt");
      assert( v3.getSize() == 3 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 1 );
      assert( v3.getItem(1) == 2 );
      assert( v3.getItem(2) == 3 );
      cout << " 2 " << flush;

	// read a vector we know into a nonempty Vec...
	Vec v2(5);
	v2.readFrom("vecTest2.txt");
	// make a copy of it in a different file
	v2.writeTo("vecTest2Copy.txt");
	cout << " 3 " << flush;
	cout << "vecTest2Copy.txt created " << flush;
	// read in the copy and check it
	v3.readFrom("vecTest2Copy.txt");
      assert( v3.getSize() == 4 );
      assert( v3.myArray != NULL );
      assert( v3.getItem(0) == 2 );
      assert( v3.getItem(1) == 4 );
      assert( v3.getItem(2) == 6 );
      assert( v3.getItem(3) == 8 );
      cout << " 4 " << flush;
	cout << "Passed!  Make sure you closed the file..." << endl;
}

ajs244@gold25:~/cs112/proj3$ cat VecTester.cpp[2Ph[4P.cpp[2PhcppTester.hcpp[Kcat testet r.cpp
/* tester.cpp drives the testing of our Vec class and runs an Application that uses Vec objects.
 * Student: Advait Scaria
 * Date: 09/25/2018
 * Begun by: Joel C. Adams, for CS 112 at Calvin College.
 */

#include "VecTester.h"
#include "Application.h"

int main() {
	VecTester vt;			// make a VecTester that tests Vec method
	vt.runTests();			// run the VecTester's tests methods

	Application x;			// make a Vec Application object and run it
	x.run();
}
ajs244@gold25:~/cs112/proj3$ cat V vecStreamOut.txt
5
10
11
12
13
14
ajs244@gold25:~/cs112/proj3$ cat vecStreamOut.txtu[1P[1P[1P[1P[1P[1P[1P[1P[1@T[1@e[1@st[1@1
3
1
2
3

ajs244@gold25:~/cs112/proj3$ cat vecTest1.txt[1P[1@2
4
2
4
6
8

ajs244@gold25:~/cs112/proj3$ cd Debug
ajs244@gold25:~/cs112/proj3/Debug$ ls
Application.d  makefile    proj3.1     tester.d  Vec.o
Application.o  objects.mk  sources.mk  tester.o  VecTester.d
lab3	       proj3	   subdir.mk   Vec.d	 VecTester.o
ajs244@gold25:~/cs112/proj3/Debug$ make all
make: Nothing to be done for 'all'.
ajs244@gold25:~/cs112/proj3/Debug$ cd ..
ajs244@gold25:~/cs112/proj3$ ./Debug/proj3
Testing class Vec
Testing default constructor... Passed!
Testing explicit constructor...  1  2  3  4 Passed!
Testing copy constructor... 1  2  3 Passed!
Testing destructor... Passed, but make sure ~Vec() is returning the array's memory to the system!
Testing =... 0  1  2  3  4  5  6  7 Passed!
Testing getSize()... 1  2 Passed!
Testing setItem()...  0  1  2 Passed!
Testing getItem()...  0  1  2 Passed!
Testing setSize()... 0  1  2  3  4 Passed!
Testing ==... 1  2  3  4  5  6  7 Passed!
Testing writeTo(ostream)... Passed! See 'vecStreamOut.txt' for values...
Testing readFrom(istream)... Passed!
Testing subscript...  0  1  2  Passed!
Testing !=...  0  1  2  3 Passed!
Testing +...  1  2  3  4 Passed!
Testing -...  1  2  3  4 Passed!
Testing *...  1  2  3  4 Passed!
Testing readFrom()...  1  2 Passed! Make sure you close the file...
Testing writeTo()...  1 vecTest1Copy.txt created  2  3 vecTest2Copy.txt created  4 Passed!  Make sure you closed the file...
All tests passed!

Welcome to the Vec Application! 

Enter the number of dimensions: 3

Enter coordinate 1 of the starting point: 0
Enter coordinate 2 of the starting point: 0
Enter coordinate 3 of the starting point: 0

Starting point = {0, 0, 0}

Enter number of vectors: 4

Enter details of vector 1: 
	 Enter coordinate 1 of vector 1: 1
	 Enter coordinate 2 of vector 1: 0
	 Enter coordinate 3 of vector 1: 0

	 Vector 1 = {1, 0, 0}

Enter details of vector 2: 
	 Enter coordinate 1 of vector 2: 0
	 Enter coordinate 2 of vector 2: 1
	 Enter coordinate 3 of vector 2: 0

	 Vector 2 = {0, 1, 0}

Enter details of vector 3: 
	 Enter coordinate 1 of vector 3: 0
	 Enter coordinate 2 of vector 3: 0
	 Enter coordinate 3 of vector 3: 1

	 Vector 3 = {0, 0, 1}

Enter details of vector 4: 
	 Enter coordinate 1 of vector 4: 1
	 Enter coordinate 2 of vector 4: 2
	 Enter coordinate 3 of vector 4: 3

	 Vector 4 = {1, 2, 3}

Final vector coordinates/Sum of starting point and vectors = {2, 3, 4}
ajs244@gold25:~/cs112/proj3$ exit

Script done on Mon 01 Oct 2018 02:54:41 PM EDT
